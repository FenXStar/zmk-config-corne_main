/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define FLR 3
#define ADJ 4

&lt { quick_tap_ms = <219>; };

&mt { quick_tap_ms = <219>; };

/ {
    behaviors {
        tdF: tap_dance_lang1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp F>, <&kp LG(F11)>;
        };

        tdJ: tap_dance_lang2 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp J>, <&kp LG(F12)>;
        };

        lh_pht: left_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5>;    // <---[[right-hand keys]]
        };
    };

    combos {
        compatible = "zmk,combos";

        ParaLeft {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <4 5>;
            timeout-ms = <20>;
        };

        ParaRight {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <6 7>;
            timeout-ms = <20>;
        };

        BrakLeft {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <16 17>;
            timeout-ms = <20>;
        };

        BrakRight {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <18 19>;
            timeout-ms = <20>;
        };

        BraceLeft {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <28 29>;
            timeout-ms = <20>;
        };

        BraceRight {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <30 31>;
            timeout-ms = <20>;
        };

        DoubleQuote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <12 13>;
            timeout-ms = <20>;
        };

        SingleQuote {
            bindings = <&kp APOSTROPHE>;
            key-positions = <22 23>;
            timeout-ms = <20>;
        };

        //LangRu {
        //    bindings = <&kp LG(F11)>;
        //    key-positions = <0 1>;
        //    timeout-ms = <20>;
        //};
        //LangUs {
        //   bindings = <&kp LG(F12)>;
        //    key-positions = <10 11>;
        //    timeout-ms = <20>;
        //};
        //LangRuL {
        //    bindings = <&kp LG(F11)>;
        //    key-positions = <36 38>;
        //    timeout-ms = <20>;
        //};
        //LangUsL {
        //    bindings = <&kp LG(F12)>;
        //    key-positions = <39 41>;
        //    timeout-ms = <20>;
        //};

        TildaSign {
            bindings = <&kp GRAVE>;
            key-positions = <0 1>;
            timeout-ms = <20>;
        };

        GraveSign {
            bindings = <&kp TILDE>;
            key-positions = <2 3>;
            timeout-ms = <20>;
        };

        MinusSign {
            bindings = <&kp MINUS>;
            key-positions = <3 4>;
            timeout-ms = <20>;
        };

        PlusSign {
            bindings = <&kp PLUS>;
            key-positions = <7 8>;
            timeout-ms = <20>;
        };

        UnderscoreSign {
            bindings = <&kp UNDERSCORE>;
            key-positions = <15 16>;
            timeout-ms = <20>;
        };

        OR {
            bindings = <&kp PIPE>;
            key-positions = <8 9>;
            timeout-ms = <20>;
        };

        Equal {
            bindings = <&kp EQUAL>;
            key-positions = <19 20>;
        };

        AND {
            bindings = <&kp AMPERSAND>;
            key-positions = <20 21>;
        };

        XOR {
            bindings = <&kp CARET>;
            key-positions = <32 33>;
        };

        Backs {
            bindings = <&kp BACKSPACE>;
            key-positions = <11 10>;
        };

        NOT {
            bindings = <&kp EXCLAMATION>;
            key-positions = <14 15>;
        };

        IF {
            bindings = <&kp QUESTION>;
            key-positions = <26 27>;
        };

        MUL {
            bindings = <&kp ASTERISK>;
            key-positions = <31 32>;
        };

        DIV {
            bindings = <&kp SLASH>;
            key-positions = <28 27>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC    &kp Q  &kp W  &kp E      &kp R  &kp T        &kp Y      &kp U  &kp I          &kp O    &kp P     &kp LEFT_BRACKET
&kp TAB    &kp A  &kp S  &kp D      &kp F  &kp G        &kp H      &kp J  &kp K          &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C      &kp V  &kp B        &kp N      &kp M  &kp COMMA      &kp DOT  &kp FSLH  &kp RIGHT_BRACKET
                         &kp LCTRL  &mo 1  &kp SPACE    &kp ENTER  &mo 2  &kp BACKSPACE
            >;
        };

        lower_layer {
            bindings = <
&kp GRAVE  &kp N1    &kp N2  &kp N3     &kp N4    &kp N5       &kp N6     &kp N7     &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TILDE  &kp EXCL  &kp AT  &kp HASH   &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp EQUAL
&kp LSHFT  &none     &none   &none      &none     &mo 4        &none      &none      &none      &none     &none     &none
                             &kp RCTRL  &none     &kp SPACE    &kp ENTER  &kp MINUS  &kp EQUAL
            >;
        };

        raise_layer {
            bindings = <
&kt ESC         &none  &none  &none      &none  &kp PRINTSCREEN    &none      &kp HOME       &kp UP    &kp END    &kp DELETE      &kp BACKSPACE
&kp TAB         &none  &none  &none      &none  &kp LG(LS(S))      &none      &kp LEFT       &kp DOWN  &kp RIGHT  &none           &kp C_PLAY_PAUSE
&kp LEFT_SHIFT  &none  &none  &none      &none  &none              &mo 3      &kp PAGE_DOWN  &none     &kp PG_UP  &kp C_PREVIOUS  &kp C_NEXT
                              &kp RCTRL  &none  &kp SPACE          &kp ENTER  &none          &none
            >;
        };

        adjust_layer {
            bindings = <
&bootloader  &sys_reset    &out OUT_TOG  &none         &none         &none           &none         &none         &none         &out OUT_TOG  &sys_reset    &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&none        &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &none
                                         &none         &none         &none           &none         &none         &none
            >;
        };

        fbuttons_layer {
            bindings = <
&kp F1          &kp F2  &kp F3  &kp F4     &kp F5  &kp F6    &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&kp TAB         &none   &none   &none      &none   &none     &none   &none   &none   &none    &none    &none
&kp LEFT_SHIFT  &none   &none   &none      &none   &none     &none   &none   &none   &none    &none    &none
                                &kp RCTRL  &none   &none     &none   &none   &none
            >;
        };
    };
};
